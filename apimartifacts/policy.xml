<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - Only the <forward-request> policy element can appear within the <backend> section element.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy position the cursor at the desired insertion point and click on the round button associated with the policy.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Policies are applied in the order of their appearance, from the top down.
-->
<policies>
	<inbound>
		<cors allow-credentials="true">
			<allowed-origins>
				<origin>https://brd-scus-apimdemo-dev.developer.azure-api.net</origin>
				<origin>https://red-scus-apimdemo-dev.developer.azure-api.net</origin>
				<origin>http://localhost:3000</origin>
				<origin>https://zealous-sand-0c1f9530f.6.azurestaticapps.net/</origin>
			</allowed-origins>
			<allowed-methods preflight-result-max-age="300">
				<method>*</method>
			</allowed-methods>
			<allowed-headers>
				<header>*</header>
			</allowed-headers>
			<expose-headers>
				<header>*</header>
			</expose-headers>
		</cors>
		<!-- Step 1: Load Named Value into a variable -->
		<set-variable name="rawIpList" value="{{allowed-ip-address}}" />
		<!--<ip-filter action="allow">
            <address-range from="1.1.1.1" to="1.1.1.100" />
        </ip-filter>-->
		<set-variable name="ipListTrace" value="@{
            var newIps = new List<string>();
            // Retrieve the Named Value
            var rawIpList = context.Variables.GetValueOrDefault("rawIpList") as string;

            // Parse into a list of strings
            var ipList = rawIpList?.Split(',').Select(ip => ip.Trim()).ToList() ?? new List<string>();


            // Trace each IP individually
            foreach (var ip in ipList)
            {
                newIps.Add(ip);
            }

            // Format for trace output
            var traceOutput = string.Join(" | ", newIps);

            return traceOutput;
        }" />
	</inbound>
	<backend>
		<forward-request />
	</backend>
	<outbound />
	<on-error />
</policies>