<!--
    IMPORTANT:
    - Policy fragment are included as-is whenever they are referenced.
    - If using variables. Ensure they are setup before use.
    - Copy and paste your code here or simply start coding
-->
<fragment>
	<choose>
		<when condition="@(!string.IsNullOrEmpty((string)context.Variables["responseId"]))">
			<send-request mode="new" response-variable-name="funcResponse" timeout="60" ignore-error="true">
				<set-url>@("https://red-ccan-functionapp.azurewebsites.net/api/CacheResponseToUserHttpTrigger?key="+(string)context.Variables["responseId"])</set-url>
				<set-method>GET</set-method>
			</send-request>
			<set-variable name="useFuncResponse" value="@(((IResponse)context.Variables["funcResponse"]).Body.As<JObject>().ToString())" />
			<set-variable name="cacheResponse" value="@(Newtonsoft.Json.JsonConvert.DeserializeObject<JObject>((string)context.Variables["useFuncResponse"]))" />
			<!-- Include Fragment, but first set all appropriate variables -->
			<set-variable name="cache-key" value="@((string)context.Variables.GetValueOrDefault<JObject>("cacheResponse")["key"])" />
			<set-variable name="cache-hit" value="@((string)context.Variables.GetValueOrDefault<JObject>("cacheResponse")["hit"])" />
			<set-variable name="cache-value" value="@((string)context.Variables.GetValueOrDefault<JObject>("cacheResponse")["value"])" />
		</when>
	</choose>
	<!-- Compare current user to cached userId -->
	<choose>
		<when condition="@{
                var currentUser = (string)context.Variables["userId"];
                var cachedUser = (string)context.Variables.GetValueOrDefault("cache-value");
                return !string.IsNullOrEmpty(cachedUser) && currentUser != cachedUser;
            }">
			<return-response>
				<set-status code="403" reason="Forbidden" />
				<set-body>Unauthorized to access this response.</set-body>
			</return-response>
		</when>
	</choose>
</fragment>